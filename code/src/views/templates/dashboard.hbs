<html>
{{>head}}
<script>
    $(function () {
        $("#datepicker").datepicker();

    });
    $(function () {
        $("#datepicker2").datepicker();
    });
    function YAxisErrorData(actualData,forecastData){
            tempData = []
            for(var i=0;i<actualData.length;i++){
                actualValue = actualData[i]
                forecastValue = forecastData[i]
                temp = ((actualValue - forecastValue)/  actualValue )*100;
                tempData.push(temp)
            }
            return tempData;
        }
</script>

<body>
    <script type="text/javascript">
    $("body").prepend('<div id="preloader">Loading...</div>');
    $(document).ready(function() {
        $("#preloader").remove();
    });
</script>
    <h2 class="text-center">Comparison of Forecast & Actual data</h2>
    
    <div class="selectorPanel">
    <div class="container ">
        <form action="" method="GET">
            <input type="checkbox" name="provider" id="iitm" value="IITM" checked>IITM
            <input type="checkbox" name="provider" id="ecmwf" value="ECMWF" checked>ECMWF
            <input type="checkbox" name="provider" id="actual" value="ACTUAL" checked>ACTUAL
            
        <br>
            
                <input type="radio" name="parameter" id="wind" value="wind" >Wind
                <input type="radio" name="parameter" id="solar" value="solar">Solar
                {{!-- <input type="radio" name="parameter" id="temperature" value="temperature">temperature
                <input type="radio" name="parameter" id="humidity" value="humidity">humidity --}}
            
        
    <br>
            <input type="radio" name="owner" id="ostro" value="ostro" >Ostro
            <input type="radio" name="owner" id="arinsun" value="arinsun" >Arinsun
            <input type="radio" name="owner" id="mahindra" value="mahindra" >Mahindra
            <input type="radio" name="owner" id="acme" value="acme" >Acme


           
            <input type="text" id="datepicker" class="col s1 offset-s4" placeholder="Select Date" name="fromdate"
                autocomplete="off" required oninput="saveValue(this)">
            {{!-- <input type="text" id="datepicker2" class="col s1 " placeholder="To Date" name="todate" autocomplete="off"> --}}

            
                
                    <input type="submit" id="submit" >

               
            </form>
            
        </div>
     </div>
     <a href="/downloadData">Download City Wise Data</a>
    <div id="RMSE"></div>
    <div id="myplot"></div>
    <div id="RMSE"></div>
    <div id="generationPlot"></div>
    <div id="errorPlot"></div>
    <script>
        lineWidth = 4
        yaxisIITM = [{{data.IITM.value}}]
        xaxisIITM = [{{data.IITM.index}}]
        var IITM = {
  x: xaxisIITM,
  y: yaxisIITM,
  type: 'scatter',
  name:'IITM',
  marker:{
      color:'rgb(0,123,255)'
  },
  line:{
      width:lineWidth
  }
};
var IITMDataReliable = true;
yaxisIITM.forEach( (entry) => {
if(isNaN(entry)){
       IITMDataReliable = false;
    }
})
yaxisECMWF = [{{data.ECMWF.value}}]
xaxixECMWF = [{{data.ECMWF.index}}]

var ECMWFDataReliable = true;
yaxisECMWF.forEach( (entry) => {
    if(isNaN(entry)){
       ECMWFDataReliable = false;
    }
})
var ECMWF = {
  x: xaxixECMWF,
  y: yaxisECMWF,
  type: 'scatter',
  name:'ECMWF',
  marker:{
      color:'rgb(253,126,30)'
  },
  line:{
      width:lineWidth
  }
};

yaxisACTUAL = [{{data.ACTUAL.value}}]
xaxisACTUAL = [{{data.ACTUAL.index}}]
var ACTUALDataReliable = true;
yaxisACTUAL.forEach( (entry) => {
    if(isNaN(entry)){
        ACTUALDataReliable = false;
    }
})
var ACTUAL = {
    x:xaxisACTUAL,
    y:yaxisACTUAL ,
    type: 'scatter',
  name:'ACTUAL',
  marker:{
      color:'rgb(75,211,72)'
  },
  line:{
      width:lineWidth
  }
}

yaxixMyForecast = [{{data.MYForecast.value}}]
xaxisMyForecast = [{{data.MYForecast.index}}]
var MYForecast = {
    x:xaxisMyForecast,
    y:yaxixMyForecast,
    type: 'scatter',
  name:'MyForecast',
  marker:{
      color:'rgb(195,155,211)'
  },
  line:{
      width:lineWidth
  }

}

if(ECMWFDataReliable && IITMDataReliable && ACTUALDataReliable){
    //var data = [IITM,ECMWF,ACTUAL,MYForecast];
    var data = [IITM,ECMWF,ACTUAL];
}
else if(IITMDataReliable && ACTUALDataReliable){
    var data = [IITM,ACTUAL]
}
else if(ECMWFDataReliable && ACTUALDataReliable){
    var data = [ECMWF,ACTUAL]
}
else if(ECMWFDataReliable && IITMDataReliable){
    var data = [ECMWF,IITM]
}
else if(IITMDataReliable){
    var data = [IITM,MYForecast]
}
else if(ECMWFDataReliable){
    var data = [ECMWF,MYForecast]
}
else if(ACTUALDataReliable){
    var data = [ACTUAL,MYForecast]
}
else{
    var data = [];
}
var layout = {
  title:{
      text:'Data comparison for date '+ '{{date}}' + ' for ' + '{{upperFirst owner}}',
      font:{
          size:24
      }
  },
  xaxis: {
    title: {
        text:'Timeblock',
        font:{
            size:20
        }
    },
    showgrid: true,
    zeroline: true,
    ticklen:8,
    showticklabel:true
  },
  yaxis: {
    title: {
        text:'{{y_axis_title}}',
        font:{
            size:20
        }
    },
    showline: true
  },
  legend: {
    font: {size: 18},
    yref: 'paper',
    orientation:'h'
  }
};

Plotly.newPlot('myplot', data, layout, {showSendToCloud: true});
    </script>

<script>
    var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = window.location.search.substring(1),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
        }
    }
};
    var parameter = getUrlParameter('parameter')
    var provider = getUrlParameter('provider')
    var fromdate=  getUrlParameter('fromdate')
    var owner = getUrlParameter('owner')
    var ajaxReq = $.ajax({
        url:'/generation',
        type:'GET',
        data:jQuery.param({'parameter':parameter, 'provider':'ACTUAL' , 'fromdate':fromdate ,'owner':owner})
    })
    ajaxReq.done(function(data,status,xhr){
            xaxisGeneration = data.Generation.index;
            yaxisGeneration = data.Generation.value;
            
            xaxisGenerationForecast = data.GenerationForecast.index;
            yaxisGenerationForecast = data.GenerationForecast.value;
            
            $('#RMSE').html('The RMSE error is '+ (data.RMSE).toFixed(2) + '%') 
            var GenerationDataReliable = true;
yaxisGeneration.forEach( (entry) => {
    if(isNaN(entry)){
        GenerationDataReliable = false;
    }
})
var generation = {
    x:xaxisGeneration,
    y:yaxisGeneration ,
    type: 'scatter',
  name:'generation',
  line:{
      width:5
  }
  
}
var generationForecast = {
    x:xaxisGenerationForecast,
    y:yaxisGenerationForecast,
    type: 'scatter',
  name:'Generation Forecast',
  line:{
      width:5
  },marker:{
      color:'rgb(195,155,211)'
  }
}
//var dataGeneration = [generation,generationForecast]
var dataGeneration = [generation]

var layout = {
  title: {
      text:'Actual Generation for '+ '{{date}}' + ' for ' + '{{upperFirst owner}}',
      font:{
          size:24
      }
  } ,
  xaxis: {
     title: {
        text:'Timeblock',
        font:{
            size:20
        }
    },
    showgrid: true,
    zeroline: true,
    ticklen:8,
    showticklabel:true
  },
  yaxis: {
    title: {
        text:'MW',
        font:{
            size:20
        }
    },
    showline: true
  },
  legend: {
    font: {size: 18},
    yref: 'paper',
    orientation:'h'
  }
}
Plotly.newPlot('generationPlot', dataGeneration, layout, {showSendToCloud: true});


        
    } );
</script>
<script>
    var IITMERROR = {
    x:xaxisIITM,
    y:YAxisErrorData(yaxisACTUAL,yaxisIITM),
    type:'scatter',
    name:'Error IITM',
    yaxis:'y2'
}
var ECMWFERROR = {
    x:xaxixECMWF,
    y:YAxisErrorData(yaxisACTUAL,yaxisECMWF),
    type:'scatter',
    name:'Error ECMWF',
    yaxis:'y2'
}
var ForeCastError =  {
    x:xaxisMyForecast,
    y:YAxisErrorData(yaxisACTUAL,yaxixMyForecast),
    type:'scatter',
    name:'ERROR FORECAST',
    yaxis:'y2'
}
var data = [ForeCastError]
var Errorlayout = {
  title:{
      text:'Error plot for date '+ '{{date}}' + ' for ' + '{{upperFirst owner}}',
      font:{
          size:24
      }
  },
  xaxis: {
    title: {
        text:'Timeblock',
        font:{
            size:20
        }
    },
    showgrid: true,
    zeroline: true,
    ticklen:8,
    showticklabel:true
  },
  yaxis: {
    title:'Error Percentage',
    showline: true
  },
  legend: {
    font: {size: 18},
    yref: 'paper',
    orientation:'h'
  }
};
//Plotly.newPlot('errorPlot', data, Errorlayout, {showSendToCloud: true});
//Comment out to show error plots
</script>


    <script>
        function downloadToCSV(csvData){
            csvData = 5;
            encodeURI = encodeURI(csvData)
            window.open(encodeURI);
        }
        function saveValue(e){
        console.log(e)
        var id = e.id;
        var value = id.value;
        localStorage.setItem(id,value);
        console.log('The id is ',id,' the value is ',value)
    }
    </script>
    <script>
        function FillFormValues(){
        var parameter = getUrlParameter('parameter')
    var provider = getUrlParameter('provider')
    var fromdate=  getUrlParameter('fromdate')
    var owner = getUrlParameter('owner')
    $('#'+parameter).prop('checked',true);
    $('#datepicker').val(fromdate)
    $('#'+owner).prop('checked',true);
    }

    FillFormValues()
    </script>
    <script>
        
    </script>
</body>

</html>